class Memo{constructor(t){this.url=t.url,this.el=document.querySelector(t.el),this.init()}async T(t){const i=new Date(t),[e,n,a,s,d]=[i.getFullYear(),String(i.getMonth()+1).padStart(2,"0"),String(i.getDate()).padStart(2,"0"),String(i.getHours()).padStart(2,"0"),String(i.getMinutes()).padStart(2,"0")];return`${e}-${n}-${a}&nbsp;${s}:${d}`}c(t){return document.createElement(t)}async box(t,i){t.classList.add("li");const e=this.c("div"),n=this.c("div"),a=this.c("time");e.innerHTML=i.body,a.innerHTML=await this.T(i.date),n.appendChild(a),t.appendChild(e),t.appendChild(n)}async ran(t){const{data:i}=await this.get(`${this.url}/ranmemo`);t.classList.add("li"),t.innerHTML=i.body;const e=this.c("div"),n=this.c("time");n.innerHTML=await this.T(i.date),e.appendChild(n),t.appendChild(e)}async li(t){const{data:i}=await this.get(`${this.url}/memo/0/0/10`);for(const e of i){const i=this.c("div");this.box(i,e),t.appendChild(i)}this.el.appendChild(t)}async get(t){try{return(await fetch(t)).json()}catch(t){const i="=͟͟͞͞ʕ•̫͡•ʔ=͟͟͞͞  Get Data Failed.";return void(this.el.innerHTML=i)}}init(){const t=this.c("div"),i=document.createDocumentFragment();this.el.appendChild(t),this.ran(t),this.li(i),t.onclick=()=>{this.ran(t)}}}